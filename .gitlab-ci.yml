variables:
  APP_NAME: norma

stages:
  - docker
  - kubernetes-homo
  - kubernetes-prod

docker:
  image: docker:19.03
  stage: docker
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $APP_NAME .
    - docker tag $APP_NAME $CI_REGISTRY/ssp/$APP_NAME:${CI_COMMIT_SHA:0:8}
    - docker push $CI_REGISTRY/ssp/$APP_NAME

kubernetes-homo-only-main:
  image: dtzar/helm-kubectl
  environment:
    name: homologacao
  stage: kubernetes-homo
  only:
    - main
  script:
    - deployHomo

kubernetes-homo-except-main:
  image: dtzar/helm-kubectl
  environment:
    name: homologacao
  stage: kubernetes-homo
  except:
    - main 
  script:
    - deployHomo

# PROD

kubernetes-prod:
  image: dtzar/helm-kubectl
  stage: kubernetes-prod
  environment:
    name: producao
  when: manual
  only:
    - main
  script:
    - deployProd

#---------------------------------------------------------------------------

.functions: &functions |

  function deployHomo() {
     mkdir ~/.kube && echo "$KUBE_CONFIG_HOMO" > ~/.kube/config

     # Criar/atualizar secret com todas as variáveis do GitLab
     kubectl create secret generic norma-secret \
       --from-literal=GEMINI_API_KEY="$GEMINI_API_KEY" \
       --from-literal=NORMA_OAUTH_CLIENT_ID="$NORMA_OAUTH_CLIENT_ID" \
       --from-literal=NORMA_OAUTH_CLIENT_SECRET="$NORMA_OAUTH_CLIENT_SECRET" \
       --from-literal=NORMA_OAUTH_TOKEN_ENDPOINT="$NORMA_OAUTH_TOKEN_ENDPOINT" \
       --from-literal=LANGFUSE_SECRET_KEY="$LANGFUSE_SECRET_KEY" \
       --from-literal=LANGFUSE_PUBLIC_KEY="$LANGFUSE_PUBLIC_KEY" \
       --from-literal=LANGFUSE_HOST="$LANGFUSE_HOST" \
       --dry-run=client -o yaml | kubectl apply -f -
     
     # Aplicar deployment
     cat ./kube/deployment.yaml | sed "s/{{COMMIT_ID}}/${CI_COMMIT_SHA:0:8}/g" | sed "s/{{JOB_ID}}/$CI_JOB_ID/g" > deployment-temp.yaml
     kubectl apply -f deployment-temp.yaml
     kubectl apply -f ./kube/service.yaml
     kubectl apply -f ./kube/ingress.yaml
     kubectl rollout status -f deployment-temp.yaml || (kubectl describe pod -l jobid=$CI_JOB_ID && kubectl logs --tail=10000 -l jobid=$CI_JOB_ID && exit 1)
   }

  function deployProd() {
     mkdir ~/.kube && echo "$KUBE_CONFIG_PROD" > ~/.kube/config

     # Criar/atualizar secret com todas as variáveis do GitLab
     kubectl create secret generic norma-secret \
       --from-literal=GEMINI_API_KEY="$GEMINI_API_KEY" \
       --from-literal=NORMA_OAUTH_CLIENT_ID="$NORMA_OAUTH_CLIENT_ID" \
       --from-literal=NORMA_OAUTH_CLIENT_SECRET="$NORMA_OAUTH_CLIENT_SECRET" \
       --from-literal=NORMA_OAUTH_TOKEN_ENDPOINT="$NORMA_OAUTH_TOKEN_ENDPOINT" \
       --from-literal=LANGFUSE_SECRET_KEY="$LANGFUSE_SECRET_KEY" \
       --from-literal=LANGFUSE_PUBLIC_KEY="$LANGFUSE_PUBLIC_KEY" \
       --from-literal=LANGFUSE_HOST="$LANGFUSE_HOST" \
       --dry-run=client -o yaml | kubectl apply -f -
     
     # Aplicar deployment
     cat ./kube/deployment.yaml | sed "s/{{COMMIT_ID}}/${CI_COMMIT_SHA:0:8}/g" | sed "s/{{JOB_ID}}/$CI_JOB_ID/g" > deployment-temp.yaml
     kubectl apply -f deployment-temp.yaml
     kubectl apply -f ./kube/service.yaml
     kubectl apply -f ./kube/ingress.yaml
     kubectl rollout status -f deployment-temp.yaml || (kubectl describe pod -l jobid=$CI_JOB_ID && kubectl logs --tail=10000 -l jobid=$CI_JOB_ID && exit 1)
   }

before_script:
  - *functions
